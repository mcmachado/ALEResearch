/* Author: Marlos C. Machado */

#ifndef RAM_H
#define RAM_H

#include <ale_interface.hpp>

class RAMFeatures{
	private:
	public:
		/**
 		* Constructor. 
 		*/
		RAMFeatures();

		/**
 		* This method gets a the current RAM state and stores the indices that correspond to
 		* active bits in the RAM. vector<int>& features an empty vector that will be filled
 		* with the requested information, therefore it must be passed by reference. Its i-th
 		* position is TRUE if the i-th feature is active.
 		*/
		void getActiveFeaturesIndices(const ALERAM &ram, vector<int>& features);

		/**
 		* It 'returns' a binary vector containing 1's where the feature is active. To avoid 
 		* return huge vectors, this method is void and the appropriate vector is returned
 		* trough a parameter passed by reference.
 		*/
		void getCompleteFeatureVector(const ALERAM &ram, vector<bool>& features);

		/**
 		* Obtain the total number of features that are generated by this feature representation.
 		*/
		int getNumberOfFeatures();

		/**
		* Destructor, not necessary in this class.
		*/
		~RAMFeatures();
};

#endif