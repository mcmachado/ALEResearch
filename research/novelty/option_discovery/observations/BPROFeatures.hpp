/****************************************************************************************
** Implementation of a variation of BASS Features, which has features to encode the 
**  relative position between tiles.
**
** REMARKS: - This implementation is basically Erik Talvitie's implementation, presented
**            in the AAAI'15 LGCVG Workshop.
**
** Author: Marlos C. Machado
***************************************************************************************/

#ifndef BPROS_H
#define BPROS_H

#include <tuple>
#include <ale_interface.hpp>

#include "Background.hpp"

using namespace std;

class BPROFeatures{
	private:
		Parameters *param;
		Background *background;
		
		int numBasicFeatures;
    	int numRelativeFeatures;
    	int rowLess0Shift, row0Shift, rowMore0Shift;
        int numColumns, numRows, numColors;
        vector<vector<bool> > bproExistence;
        vector<tuple<int,int> > changed;
    
        int getBasicFeaturesIndices(const ALEScreen &screen, int blockWidth, int blockHeight,
            vector<vector<tuple<int,int> > > &whichColors, vector<int>& features);
		void addRelativeFeaturesIndices(const ALEScreen &screen, int featureIndex,
            vector<vector<tuple<int,int> > > &whichColors, vector<int>& features);
		void resetBproExistence(vector<vector<bool> >& bproExistence, vector<tuple<int,int> >& changed);
	public:
		/**
		* Destructor, used to delete the background, which is allocated dynamically.
		*/
		~BPROFeatures();

		/**
 		* Constructor. 
 		*/
		BPROFeatures(Parameters *param);

		/**
 		* This method gets a the current screen state and stores the indices that correspond
 		* to active features in the BPRO set. vector<int>& features an empty vector that will
 		* be filled with the requested information, therefore it must be passed by reference.
 		* Its i-th position is TRUE if the i-th feature is active.
 		*/
		void getActiveFeaturesIndices(const ALEScreen &screen, vector<int>& features);	

		/**
 		* Obtain the total number of features that are generated by this feature representation.
 		*/
		int getNumberOfFeatures();
};
#endif
